# üìò Sistema de Gest√£o de Projetos e Equipes

## üìå Descri√ß√£o do Projeto

O sistema tem como objetivo auxiliar na gest√£o de projetos e equipes, permitindo o cadastro e manuten√ß√£o de usu√°rios, projetos, tarefas, equipes e a aloca√ß√£o entre eles.  
Al√©m disso, o sistema contar√° com relat√≥rios de acompanhamento e dashboards, oferecendo uma vis√£o clara do andamento dos projetos e da performance das equipes.

O sistema ter√° diferentes perfis de acesso (Administrador, Gerente e Colaborador), com permiss√µes distintas de acordo com o papel de cada usu√°rio.  
A interface ser√° constru√≠da em Java (Swing/JavaFX) conectada a um banco de dados MySQL.

---

## ‚öôÔ∏è Tecnologias Utilizadas

- Java 17+  
- JavaFX (interface gr√°fica)  
- MySQL (persist√™ncia de dados)  
- Maven (gerenciamento de depend√™ncias)  
- SceneBuilder (prototipa√ß√£o de telas em FXML)  

---

## ‚úÖ Requisitos Iniciais (Expl√≠citos)

### Cadastro de Usu√°rios
- Nome completo, CPF, e-mail, cargo, login, senha.  
- Perfis: administrador, gerente, colaborador.  

### Cadastro de Projetos
- Nome, descri√ß√£o, datas de in√≠cio e t√©rmino previstas, status (planejado, em andamento, conclu√≠do, cancelado).  
- Cada projeto deve ter um gerente respons√°vel.  

### Cadastro de Equipes
- Nome da equipe, descri√ß√£o, membros vinculados.  
- Uma equipe pode atuar em v√°rios projetos.  

### Aloca√ß√£o de Equipes a Projetos
- Projetos podem ter v√°rias equipes.  
- Equipes podem estar em mais de um projeto.  

### Cadastro de Tarefas
- T√≠tulo, descri√ß√£o, projeto vinculado, respons√°vel, status (pendente, em execu√ß√£o, conclu√≠da).  
- Datas de in√≠cio e fim (previstas e reais).  
- Cada tarefa pertence a um √∫nico projeto.  

### Relat√≥rios e Dashboards
- Andamento dos projetos.  
- Desempenho dos colaboradores.  
- Projetos com risco de atraso.  

### Autentica√ß√£o
- Tela de login com valida√ß√£o no banco de dados.  

### Interface Visual
- Prot√≥tipos antes da codifica√ß√£o.  
- Navega√ß√£o simples e intuitiva.  

---

## ü§î Requisitos Impl√≠citos (a serem definidos pelo time)

- Vincula√ß√£o entre tarefas, projetos e colaboradores.  
- Usu√°rio pode estar em mais de uma equipe?  
- O que acontece com tarefas se o projeto for cancelado?  
- Hist√≥rico de altera√ß√µes de status das tarefas.  
- Controle de permiss√µes baseado no perfil.  
- Relacionamentos no banco de dados.  
- Organiza√ß√£o dos pacotes Java.  
- Logs de acesso e auditoria.  
- Tratamento de campos obrigat√≥rios e valida√ß√µes.  

---

## üìÇ Estrutura Atual do Projeto

C:.
| .gitignore
| estrutura.txt
| gestao-projetos.iml
| pom.xml
| README.txt
| README.txt
|
+---.idea
+---.mvn
+---src
| +---br/com/gestaoprojetos
| | | Main.java
| | +---controller
| | +---dao
| | +---model
| | +---service
| | +---util
| | ---view
| +---lib
| +---main/java/org/example
| +---main/resources/fxml
| ---test/java
---target

üìå Estrutura organizada em camadas (**MVC + DAO + util**), com telas em FXML e controllers vinculados.  

---

üìÇ Banco de Dados

O projeto inclui o arquivo `database.sql` na raiz, que cont√©m:

- Estrutura de tabelas (`usuario`, `usuarios`, `projeto`, `tarefa`, `equipe`, `cargo`, `logs_atividade`, tabelas de relacionamento, etc.)
- Dados iniciais para testes (usu√°rios, cargos, tarefas, etc.)
- Chaves prim√°rias e estrangeiras para relacionamentos corretos

Para restaurar o banco de dados, basta executar o script no MySQL Workbench ou via terminal.

> O arquivo `database.sql` est√° localizado na raiz do projeto.

---

## üîé Situa√ß√£o Atual do Projeto

### ‚úÖ O que j√° foi feito
- Estrutura inicial do **projeto em Java** criada (pacotes controller, dao, model, service, util e view).  
- **Banco de dados MySQL** modelado e exportado (dump completo dispon√≠vel).  
- Tabelas principais implementadas:  
  - `usuario` / `usuarios` (duas vers√µes em uso no momento).  
  - `cargo`, `projeto`, `tarefa`, `equipe`, `equipe_usuario`, `projeto_equipe`, `logs_atividade`.  
- **Inserts iniciais de teste** j√° criados (usu√°rios, cargos, tarefas).  
- Conex√£o com o banco de dados estabelecida.  
- In√≠cio da implementa√ß√£o da camada DAO.  
- Estrutura MVC em andamento.  

### üöß O que falta
- Resolver a duplicidade entre as tabelas `usuario` e `usuarios` (unificar e ajustar FKs).  
- Finalizar todos os **CRUDs de DAO** (Usu√°rio, Projeto, Tarefa, Equipe).  
- Criar camada de **Servi√ßos (Service)** para encapsular regras de neg√≥cio.  
- Implementar telas JavaFX (FXML) com navega√ß√£o funcional.  
- Validar **regras de perfil** (Admin, Gerente, Colaborador).  
- Adicionar relat√≥rios/dashboards (gr√°ficos de progresso e desempenho).  
- Implementar sistema de **login com autentica√ß√£o real** no banco.  
- Criar logs de auditoria mais completos.  
- Escrever testes unit√°rios e de integra√ß√£o.  
- Documentar manual de uso e execu√ß√£o.  

---

## üöÄ Pr√≥ximos Passos

### Banco de Dados
- Finalizar modelo relacional no MySQL.  
- Criar chaves estrangeiras consistentes.  
- Popular com mais dados de teste.  

### Camada de Persist√™ncia (DAO)
- Ajustar e validar todas as classes DAO (CRUD completo).  
- Garantir conex√µes seguras com DBConnection.  

### Camada de Servi√ßo
- Criar regras de neg√≥cio intermedi√°rias entre DAO e Controller.  
- Validar regras de perfis (admin, gerente, colaborador).  

### Interface (JavaFX + FXML)
- Finalizar prot√≥tipos de telas.  
- Ajustar navega√ß√£o entre telas.  
- Implementar valida√ß√µes visuais (campos obrigat√≥rios, erros).  

### Relat√≥rios e Dashboards
- Criar telas de resumo de projetos e tarefas.  
- Adicionar gr√°ficos simples (progressos, status, riscos).  

### Testes
- Testes unit√°rios dos DAOs e servi√ßos.  
- Testes de integra√ß√£o (fluxos principais: login, cadastro, aloca√ß√£o).  

### Documenta√ß√£o
- Atualizar este README a cada nova etapa.  
- Criar manual simples de uso (instru√ß√µes de execu√ß√£o).  

---

## üë• Equipe e Perfis

- **Administrador:** acesso total ao sistema.  
- **Gerente de Projeto:** gerencia projetos, equipes e tarefas.  
- **Colaborador:** executa tarefas atribu√≠das.  

---

## üìå Observa√ß√µes

- O projeto ser√° evolutivo, podendo receber novos requisitos.  
- Este README servir√° como guia central de organiza√ß√£o e acompanhamento.